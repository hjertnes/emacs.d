#+TITLE: Eivind Hjertnes' Emacs configuration
* Introduction
This is my Emacs configuration, I use it for more or less anything that require me to edit text. Everything from writing, to programming, file management and a lot of command line stuff and sometimes reading email. In August of 2019 I moved my config from a pile of well commented elisp files to this org document.

Why? Because it felt like it made more sense to have my configuration in a form where it works to give a lot of context about every single little dumb detail, to inspiration for others and to remind me why. 

* Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Eivind Hjertnes"
        user-mail-address "me@hjertnes.me")
#+END_SRC
* Settings
This section contains various settings that do not belong in any other section and don't require any third party packages

** Default Dir
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Title
#+BEGIN_SRC emacs-lisp
(setq frame-title-format '("The Weird Place"))
#+END_SRC

** GC
This sets the memory limit of GC to 25% of total memory

#+BEGIN_SRC emacs-lisp
(setq gc-cons-percentage 0.25)
#+END_SRC

** Default Mode
These two settings forces emacs to use text-mode as its default mode, used when emacs can't figure out what mode to use. It is probasbly not needed to use both of those settings.
#+BEGIN_SRC emacs-lisp
(setq initial-major-mode  'text-mode)
(setq-default major-mode 'text-mode)
#+END_SRC

** Indent
Sets emacs to not use tab as ident, and sets various two spaces per tab variables. And I enable electric ident mode which will ident a line to the previous one when you hit RET. 
#+BEGIN_SRC emacs-lisp
(setq tab-with 2 indent-tabs-mode nil js-indent-level 2)
#+END_SRC

** Backup files etc
The default setup for emacs creates various lock and backup files and some auto-save stuff. This diables all of that.
#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil make-backup-files nil auto-save-default nil)
#+END_SRC

** X11 Clipboard integration
Makes sure emacs and the X11 clipboard work better together.
#+BEGIN_SRC emacs-lisp
(setq select-enable-clipboard t)
#+END_SRC

** Server mode
Server modes enable you to use emacs client. Great if you want to send files to be edited on a running emacs instance from the commandline. 
#+BEGIN_SRC emacs-lisp
(server-mode +1)
#+END_SRC

** Column numbers
Showing column numbers and line numbers in the mode line
#+BEGIN_SRC emacs-lisp
(column-number-mode +1)
#+END_SRC

** Autosave & autoload
These two modes will make emacs auto save files, and load them from disk if the file changes. 
#+BEGIN_SRC emacs-lisp
(setq auto-save-visited-interval 10)
(global-auto-revert-mode +1)
(auto-save-visited-mode +1)
#+END_SRC

** Disable package sign verify
This disabled verification of package signature, probably a bad idea, but useful in some cases, like when running non released version of Emacs.
#+BEGIN_SRC emacs-lisp
(setq package-check-signature nil)
#+END_SRC
* Package manager
One of the first things I do is to configure the Emacs package system to use all the package sources I know of, and to install use-package, request and org-plus-contrib; and then load use-package. 

Use-package will be used to load, install and configure more or less all other pakcages. Request are installed here because I use it in some of my interactive functions. And I install org-contrib-plus here because I either have to do this or to have nested use-packages, and I'm doing the lesser evil. 
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/") 
			 ("marmalade" . "http://marmalade-repo.org/packages/") 
			 ("melpa" . "http://melpa.org/packages/")))
(package-initialize)
(unless package-archive-contents (package-refresh-contents))
(dolist (package 
	 '(use-package smartparens request))
  (unless (package-installed-p package) 
    (package-install package)))
(eval-when-compile 
  (require 'use-package))
#+END_SRC
* Helper functions
Various helper functions I use a few different places in my setup. Most of them do stuff like reading passwords from auth-info, predicates for figuring out what kind of system it is or isn't and a few date related functions I use in my yasnippets
#+BEGIN_SRC emacs-lisp
(defun is-mac () 
  (eq system-type 'darwin))
(defun is-linux () 
  (eq system-type 'gnu/linux))
(defvar current-date-time-format "%a %b %d %H:%M:%S %Z %Y")
(defun get-url()
  (format-time-string "/%Y/%m/%d/"))
(defun get-datestring()
  (format-time-string "%Y-%m-%dT%T"))
(defun get-timestring()
  ((lambda (x) 
		     (concat (substring x 0 3) ":" (substring x 3 5))) 
		   (format-time-string "%z")))
#+END_SRC
* Interactive functions
Interactive functions that I use from time to time to do stuff that isn't as easy as I like out of the box. 
** Calc eval region
A simple function to just mark some math and show the result in the message area 
#+BEGIN_SRC emacs-lisp
(defun calc-eval-region (arg beg end)
  "Calculate the region and display the result in the echo area.
With prefix ARG non-nil, insert the result at the end of region."
  (interactive "P\nr")
  (let* ((expr (buffer-substring-no-properties beg end))
         (result (calc-eval expr)))
    (if (null arg)
        (message "%s = %s" expr result)
      (goto-char end)
      (save-excursion
        (insert result)))))
#+END_SRC

** Quickly find config
A function to quickly open this file
#+BEGIN_SRC emacs-lisp
(defun open-config ()
    "Build the pillow fort!"
    (interactive)
    (find-file "~/.emacs.d/hjertnes.org"))
#+END_SRC
** New Empty Buffer
Stole this one from [[http://ergoemacs.org/emacs/emacs_new_empty_buffer.html][http://ergoemacs.org/emacs/emacs_new_empty_buffer.html]]. It is a small function that let me create a new "scratch" buffer. 
#+BEGIN_SRC emacs-lisp
(defun new-buffer () 
  "Create a new empty buffer." 
  (interactive) 
  (let (($buf (generate-new-buffer "untitled"))) 
    (switch-to-buffer $buf) 
    (funcall initial-major-mode) 
    (setq buffer-offer-save t)
    $buf))
#+END_SRC
** Save all
Not soemthing I use a lot, but I do use it when I have search and replaced a lot of files, and just want to save it all. 
#+BEGIN_SRC emacs-lisp
(defun save-all () 
  (interactive) 
  (save-some-buffers t))
#+END_SRC
** Eshell New
Eshell doesn't have a "give me another shell" interactive function for some weird reason. This function let me create a new one. 
#+BEGIN_SRC emacs-lisp
(defun new-eshell()
  "Open a new instance of eshell."
  (interactive)
  (eshell 'N))
#+END_SRC

** Kill all buffers
#+BEGIN_SRC emacs-lisp
(defun close-all-buffers ()
(interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC

#+RESULTS:
: close-all-buffers

* OS X stuff
Just some settings that make Emacs better under OS X
** Make it prettier
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(ns-appearance . light))
#+END_SRC




** Use the native full screen
#+BEGIN_SRC emacs-lisp
(setq ns-use-native-fullscreen t)
#+END_SRC

** Make Emacs ignore the right command and option
This setting is really useful if you like me sometimes need to type characters that are under a option combo on OS X. This setting tells emacs to not do anything with the right option and command. 

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'super mac-right-option-modifier 'none mac-right-command-modifier 'none mac-pass-command-to-system nil))
#+END_SRC
** Get path from shell
Paths can be a little bit weird if you start emacs as an App on OS X. This package fixes it.
#+BEGIN_SRC emacs-lisp
(use-package 
  exec-path-from-shell 
  :ensure t 
  :if (is-mac) 
  :config (exec-path-from-shell-initialize))
#+END_SRC

* UI
Changes that are first and foremost UI changes
** Font
   I use JetBrains Mono with different since on my different systems
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil 
:family "JetBrains Mono"
		    :height (cond 
				  ((is-linux) 90) 
				  ((is-mac) 130)) 
		    :weight 'normal 
		    :width 'normal)
#+END_SRC
** Mininmal UI
No welcome screen on startup and no toolbar or scroll bars. 
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t initial-scratch-message nil)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC
** Wrap lines
Makes lines wrap over to the next
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC
** Highlight matching parens
Making emacs highlighting the other side of a pair makes coding a lot easier.
#+BEGIN_SRC emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC
** Highlight Search
Enables you to highlight everything matching a search in the current buffer with a speicifc color
#+BEGIN_SRC emacs-lisp
(global-hi-lock-mode +1)
#+END_SRC
** Indent Guide
Shows markers for ident levels
#+BEGIN_SRC emacs-lisp
(use-package 
  indent-guide 
  :ensure t 
  :config (indent-guide-global-mode))
#+END_SRC
** Highlight current line
Highlight the current line. All of it.
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC
** Theme
I currently use modus operandi. A very accessible light theme
#+BEGIN_SRC emacs-lisp
(load "~/Code/emacs.d-private/dracula-theme.el")

(use-package modus-operandi-theme :ensure t)
(use-package modus-vivendi-theme :ensure t)
(use-package solarized-theme :ensure t)
(load-theme 'dracula t)
#+END_SRC

** Which key
Shows keyboard shortcut hints as I type

#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t :config (which-key-mode))
#+END_SRC
** Shows a cute cat showing scroll position 
The Eli thing
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode :ensure t :config (nyan-mode +1))
#+END_SRC
** Emoji
Shows emojis
#+BEGIN_SRC emacs-lisp
(use-package emojify :ensure t :config (global-emojify-mode))
#+END_SRC

** Rainbow
These two packages makes sure that symbols like [] {} etc and keywords (variables, functions etc) get different colours. Makes it a lot easier and faster to read and work with code. 
#+BEGIN_SRC emacs-lisp
(use-package 
  rainbow-delimiters
  :ensure t 
  :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
(use-package 
  rainbow-identifiers 
  :ensure t 
  :config (add-hook 'prog-mode-hook 'rainbow-identifiers-mode))
#+END_SRC
** Flycheck
Flycheck is this awesome package that everything works with. It an show you warnings and errors in your code. 
#+BEGIN_SRC emacs-lisp
(use-package 
  flycheck 
  :ensure t)
#+END_SRC

** Company
A better autocomplete system than the built in one. Most major modes for emacs that have some kind of auto complete also integrates with company. 
#+BEGIN_SRC emacs-lisp
(use-package 
  company 
  :ensure t 
  :init (setq company-dabbrev-downcase 0 company-idle-delay 0 company-minimum-prefix-length 1)
  :config (global-company-mode +1))
#+END_SRC

** Ivy
   Ivy provide a lot of the same functionality that Helm has, just that I like it better.
*** Smex
This package provide history for the M-x command, great if you need to run the same thing multiple times or re-do the thing you did 5 commands ago. 
#+BEGIN_SRC emacs-lisp
(use-package 
  smex 
  :ensure t 
  :config (smex-initialize))
#+END_SRC

*** Cousel
This setups up Ivy and maps it to keyboard shortcuts so that I use Ivy or Counsel for stuff like M-x, selecting buffers, saarching etc . 
#+BEGIN_SRC emacs-lisp
(setq ivy-use-selectable-prompt t)
(use-package ivy-rich :ensure t :config (progn (ivy-rich-mode 1)(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)))
(use-package 
  counsel 
  :ensure t 
  :config (progn (ivy-mode 1) (counsel-mode 1) (setq  ivy-initial-inputs-alist nil ivy-use-virtual-buffers t ivy-count-format "(%d/d)")
		 (global-set-key (kbd "C-x C-b") 'ivy-switch-buffer) 
		 (global-set-key (kbd "C-s") 'swiper-isearch) 
		 (global-set-key (kbd "M-x") 'counsel-M-x) 
		 (global-set-key (kbd "C-x C-f") 'counsel-find-file) 
		 (global-set-key (kbd "<f1> f") 'counsel-describe-function) 
		 (global-set-key (kbd "<f1> v") 'counsel-describe-variable) 
		 (global-set-key (kbd "<f1> l") 'counsel-find-library) 
		 (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol) 
		 (global-set-key (kbd "<f2> u") 'counsel-unicode-char)))

#+END_SRC
** Projectile
Projectile makes it a lot easier to switch between projects in Emacs. It keeps me a LOT saner at work.
#+BEGIN_SRC emacs-lisp
(use-package 
  projectile 
  :ensure t 
  :init (setq projectile-completion-system 'ivy projectile-project-search-path '("~/Code/" )) 
  :config (progn (projectile-mode) 
		 (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map)))

#+END_SRC
*** Counsel Projectile
This package enables projectile commands using Ivy stuff. A lot nicer than the default.
#+BEGIN_SRC emacs-lisp
(use-package 
  counsel-projectile 
  :ensure t 
  :after (counsel projectile) 
  :config (counsel-projectile-mode +1))
#+END_SRC
* Languages
** C#
Adds support for C#
#+BEGIN_SRC emacs-lisp
(use-package omnisharp :ensure t :config (eval-after-load
  'company
  '(add-to-list 'company-backends #'company-omnisharp))

(defun my-csharp-mode-setup ()
  (omnisharp-mode)
  (company-mode)
  (flycheck-mode)

  (setq indent-tabs-mode nil)
  (setq c-syntactic-indentation t)
  (c-set-style "ellemtel")
  (setq c-basic-offset 4)
  (setq truncate-lines t)
  (setq tab-width 4)
  (setq evil-shift-width 4)

  ;csharp-mode README.md recommends this too
  ;(electric-pair-mode 1)       ;; Emacs 24
  ;(electric-pair-local-mode 1) ;; Emacs 25

  (local-set-key (kbd "C-c r r") 'omnisharp-run-code-action-refactoring)
  (local-set-key (kbd "C-c C-c") 'recompile))

(add-hook 'csharp-mode-hook 'my-csharp-mode-setup t))
#+END_SRC

#+RESULTS:
: t

** HTML
HTML support
#+BEGIN_SRC emacs-lisp
(use-package   web-mode   :ensure t)
#+END_SRC
** JSON
JSON support
#+BEGIN_SRC emacs-lisp
(use-package   json-mode   :ensure)
#+END_SRC

** Org
Org support
#+BEGIN_SRC emacs-lisp
(use-package 
  org 
  :init (setq org-export-with-toc nil org-descriptive-links nil org-startup-with-inline-images t))
#+END_SRC
*** HTML Export
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC

*** Journal
#+BEGIN_SRC emacs-lisp
(use-package org-journal :ensure t :init (setq org-journal-dir "~/txt/notes/journal/" org-journal-file-type 'yearly org-journal-file-format "%Y.org" org-journal-date-format "%Y-%m-%d" org-journal-time-format "%H:%M:%S") :bind (("C-c j j" . 'org-journal-new-entry)))
#+END_SRC

** TOML
TOML, the Hugo syntax. 
#+BEGIN_SRC emacs-lisp
(use-package toml-mode :ensure t)
#+END_SRC
** Elisp
Some utils for elisp.
#+BEGIN_SRC emacs-lisp
(use-package 
  elisp-format 
  :ensure t)
#+END_SRC
** Svelte
Adds support for Svelte
#+BEGIN_SRC emacs-lisp
(use-package svelte-mode :ensure t)
#+END_SRC
** Yaml
Adds support YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :ensure t)
#+END_SRC
** LSP
Language Server Protocol can power autocomplete and other functionality for many different languages
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))
(use-package company-lsp
  :ensure t
  :commands company-lsp)
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

(setq 
lsp-auto-configure nil
lsp-ui-imenu-enable t
lsp-ui-sideline-enable t
lsp-ui-doc-enable t
lsp-ui-peek-enable t
lsp-eldoc-render-all t)
#+END_SRC
** Golang
Adds support for Golang
#+BEGIN_SRC emacs-lisp
(use-package lsp-go)
(use-package go-mode
:defer t
:ensure t
:mode ("\\.go\\'" . go-mode))

(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'gofmt-before-save t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)


(setq 
flycheck-golangci-lint-enable-all t
gofmt-args '("-s")
lsp-gopls-staticcheck t
lsp-gopls-complete-unimported t)
#+END_SRC
** Caddyfile
Adds support for Caddyfile
#+BEGIN_SRC emacs-lisp
(use-package caddyfile-mode :ensure t)
#+END_SRC

** Taskpaper
Adds support for task paper
#+BEGIN_SRC emacs-lisp
(use-package taskpaper-mode :ensure t)
#+END_SRC

** Markdown
* Apps
** Mastodon
A mastodon client
#+BEGIN_SRC emacs-lisp
(use-package mastodon
  :ensure t
:init (setq mastodon-instance-url "https://dog.estate"))
#+END_SRC

#+RESULTS:

** Search
An awesome to search in a directory. 
#+BEGIN_SRC emacs-lisp
(use-package deadgrep :ensure t :bind (("<f5>". deadgrep)))
#+END_SRC
** Magit
My favourite git client
#+BEGIN_SRC emacs-lisp
(use-package 
  magit 
  :init (setq magit-completing-read-function 'ivy-completing-read) 
  :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "gfm-mode"))
#+END_SRC

* Misc
  Just a place to put every that doesn't fit anywhere else
** Avy
A way to quickly jump arround in a buffer.
#+BEGIN_SRC emacs-lisp
(use-package avy :ensure t :config (progn (global-set-key (kbd "C-:") 'avy-goto-char) (global-set-key (kbd "M-C-:") 'avy-goto-char-timer)))
#+END_SRC
** Golden Ratio
A mode that automagically resizes windows based on the golden ratio
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio :ensure t :config (setq golden-ratio-extra-commands
            (append golden-ratio-extra-commands
                    '(ace-window
                      ace-delete-window
                      ace-select-window
                      ace-swap-window
                      ace-maximize-window
                      avy-pop-mark)))
(golden-ratio-mode 1))
#+END_SRC

** Aggressive ident
Makes indent work more like expected
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent :ensure t :config (global-aggressive-indent-mode 1))
#+END_SRC
** Yasnippet
This package enables you do write snippests for stuff you type over and over and over. I don't use it a lot, but more than worth it. 
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init (setq  yas-snippet-dirs '("~/.emacs.d/snippets"))
  :config
  (yas-global-mode 1)
  :bind (("M-s M-s" . yas-insert-snippet)("C-c y" . yas-expand)("C-c p" . yas-prev-field)("C-c n" . yas-next-field)))
#+END_SRC

** Ace-window
Makes it easier to manage windows
#+BEGIN_SRC emacs-lisp
(use-package 
  ace-window 
  :ensure t 
  :init (setq aw-dispatch-always t) 
  :config (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC
** OX Hugo
A fantastic package that can turn a org document to markdown files that blog systems that hugo can use to generate a website. 
#+BEGIN_SRC emacs-lisp
(use-package 
  ox-hugo 
  :ensure t 
  :init (setq org-hugo-front-matter-format 'yaml) 
  :after ox)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package org-superstar :ensure t :config (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+END_SRC

#+RESULTS:
: t

** Tabs
Config for the new emacs27 tabs. 
#+BEGIN_SRC emacs-lisp
(setq tab-bar-show t) 
(tab-bar-mode t) 
(global-tab-line-mode)
#+END_SRC

** Undo
Undo-tree makes undo works a little bit more like you expect, and it also has this awesome command to interactivly move through the history.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree :ensure t :config (global-undo-tree-mode))
#+END_SRC
*** Undo limit
This sets a very high limit on how much stuff emacs keeps in the kill ring. I hate loosing stuff from Copy Paste fuckups. Like with GC, this could probably be lower, but I don't bother with doing so before I have a real reason for it. 
#+BEGIN_SRC emacs-lisp
(setq undo-limit 1000000000 undo-strong-limit 1000000000)
#+END_SRC
** Pairs
Electric pair mode will insert a matching symbol for pairs like ()[] etc. And smart parens is a superior way to working with them. 
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode +1)
  (require 'smartparens-config) 
  (smartparens-mode)
  (smartparens-global-mode +1)
#+END_SRC

** Multiple cursors
A package that adds multiple cursors to Emacs. Let's you place multiple cursors based on various parameters and edit all of them as if they were a single line.
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors :ensure t)
#+END_SRC
** Restart Emacs
Makes it really easy to restart emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs :ensure t)
#+END_SRC

** Crux
Adds various very useful functions
#+BEGIN_SRC emacs-lisp
(use-package crux :ensure t :config (crux-reopen-as-root-mode))
#+END_SRC

#+RESULTS:
: t
